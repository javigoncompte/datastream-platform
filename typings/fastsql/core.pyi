"""
This type stub file was generated by pyright.
"""

import sqlalchemy as sa
from fastcore.utils import *
from sqlalchemy import MetaData, Table
from sqlalchemy.sql.base import ReadOnlyColumnCollection
from sqlalchemy.engine.base import Connection
from sqlalchemy.engine.cursor import CursorResult

__all__ = ['Database', 'DBTable', 'NotFoundError']
class Database:
    "A connection to a SQLAlchemy database"
    def __init__(self, conn_str) -> None:
        ...
    
    def execute(self, st, params=..., opts=...): # -> CursorResult[Any]:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class DBTable:
    "A connection to a SQLAlchemy table, created if needed"
    def __init__(self, table: sa.Table, database: Database, cls) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def t(self) -> tuple:
        ...
    
    @property
    def pks(self) -> tuple:
        ...
    
    @property
    def conn(self): # -> Connection:
        ...
    
    def xtra(self, **kwargs): # -> None:
        "Set `xtra_id`"
        ...
    


_type_map = ...
@patch
def create(self: Database, cls: type, pk=..., name: str | None = ...): # -> DBTable:
    "Get a table object, creating in DB if needed"
    ...

@patch
def schema(self: Database): # -> str:
    "Show all tables and columns"
    ...

@patch
def exists(self: DBTable): # -> bool:
    "Check if this table exists in the DB"
    ...

@patch
def insert(self: DBTable, obj):
    "Insert an object into this table, and return it"
    ...

@patch
def __call__(self: DBTable, where: str | None = ..., where_args: Iterable | dict | NoneType = ..., order_by: str | None = ..., limit: int | None = ..., offset: int | None = ..., select: str = ..., **kw) -> list:
    "Result of `select` query on the table"
    ...

class NotFoundError(Exception):
    ...


@patch
def __getitem__(self: DBTable, key):
    "Get item with PK `key`"
    ...

@patch
def update(self: DBTable, obj=..., **kw):
    ...

@patch
def delete(self: DBTable, key): # -> int:
    "Delete item with PK `key` and return count deleted"
    ...

@patch
def __dir__(self: MetaData):
    ...

@patch
def __dir__(self: ReadOnlyColumnCollection):
    ...

@patch
def tuples(self: CursorResult, nm=...): # -> list[namedtuple]:
    "Get all results as named tuples"
    ...

@patch
def sql(self: Connection, statement, nm=..., *args, **kwargs): # -> TupleResult[Any] | None:
    "Execute `statement` string and return results (if any)"
    ...

@patch
def sql(self: MetaData, statement, *args, **kwargs):
    "Execute `statement` string and return `DataFrame` of results (if any)"
    ...

@patch
def get(self: Table, where=..., limit=...):
    "Select from table, optionally limited by `where` and `limit` clauses"
    ...

@patch
def close(self: MetaData): # -> None:
    "Close the connection"
    ...

