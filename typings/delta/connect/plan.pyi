"""
This type stub file was generated by pyright.
"""

import delta.connect.proto as proto
import pyspark.sql.connect.proto as spark_proto
from typing import Dict, List, Optional, Union
from pyspark.sql.connect.client import SparkConnectClient
from pyspark.sql.connect.column import Column
from pyspark.sql.connect.plan import LogicalPlan
from pyspark.sql.types import StructType

class DeltaLogicalPlan(LogicalPlan):
    def __init__(self, child: Optional[LogicalPlan]) -> None:
        ...
    
    def plan(self, session: SparkConnectClient) -> spark_proto.Relation:
        ...
    
    def to_delta_relation(self, session: SparkConnectClient) -> proto.DeltaRelation:
        ...
    
    def command(self, session: SparkConnectClient) -> spark_proto.Command:
        ...
    
    def to_delta_command(self, session: SparkConnectClient) -> proto.DeltaCommand:
        ...
    


class DeltaScan(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable) -> None:
        ...
    
    def to_delta_relation(self, client: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class Generate(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable, mode: str) -> None:
        ...
    
    def to_delta_command(self, client: SparkConnectClient) -> proto.DeltaCommand:
        ...
    


class DeleteFromTable(DeltaLogicalPlan):
    def __init__(self, target: Optional[LogicalPlan], condition: Optional[Column]) -> None:
        ...
    
    def to_delta_relation(self, session: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class Assignment:
    def __init__(self, field: Column, value: Column) -> None:
        ...
    
    def to_proto(self, session: SparkConnectClient) -> proto.Assignment:
        ...
    


class UpdateTable(DeltaLogicalPlan):
    def __init__(self, target: Optional[LogicalPlan], condition: Optional[Column], assignments: List[Assignment]) -> None:
        ...
    
    def to_delta_relation(self, session: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class MergeAction:
    def __init__(self, condition: Optional[Column]) -> None:
        ...
    
    def to_proto(self, session: SparkConnectClient) -> proto.MergeIntoTable.Action:
        ...
    


class UpdateAction(MergeAction):
    def __init__(self, condition: Optional[Column], assignments: List[Assignment]) -> None:
        ...
    
    def to_proto(self, session: SparkConnectClient) -> proto.MergeIntoTable.Action:
        ...
    


class UpdateStarAction(MergeAction):
    def __init__(self, condition: Optional[Column]) -> None:
        ...
    
    def to_proto(self, session: SparkConnectClient) -> proto.MergeIntoTable.Action:
        ...
    


class DeleteAction(MergeAction):
    def __init__(self, condition: Optional[Column]) -> None:
        ...
    
    def to_proto(self, session: SparkConnectClient) -> proto.MergeIntoTable.Action:
        ...
    


class InsertAction(MergeAction):
    def __init__(self, condition: Optional[Column], assignments: List[Assignment]) -> None:
        ...
    
    def to_proto(self, session: SparkConnectClient) -> proto.MergeIntoTable.Action:
        ...
    


class InsertStarAction(MergeAction):
    def __init__(self, condition: Optional[Column]) -> None:
        ...
    
    def to_proto(self, session: SparkConnectClient) -> proto.MergeIntoTable.Action:
        ...
    


class MergeIntoTable(DeltaLogicalPlan):
    def __init__(self, target: Optional[LogicalPlan], source: LogicalPlan, condition: Column, matched_actions: List[MergeAction], not_matched_actions: List[MergeAction], not_matched_by_source_actions: List[MergeAction], with_schema_evolution: Optional[bool]) -> None:
        ...
    
    def to_delta_relation(self, session: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class Vacuum(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable, retentionHours: Optional[float]) -> None:
        ...
    
    def to_delta_command(self, client: SparkConnectClient) -> proto.DeltaCommand:
        ...
    


class DescribeHistory(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable) -> None:
        ...
    
    def to_delta_relation(self, session: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class DescribeDetail(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable) -> None:
        ...
    
    def to_delta_relation(self, client: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class ConvertToDelta(DeltaLogicalPlan):
    def __init__(self, identifier: str, partitionSchema: Optional[Union[str, StructType]]) -> None:
        ...
    
    def to_delta_relation(self, client: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class IsDeltaTable(DeltaLogicalPlan):
    def __init__(self, path: str) -> None:
        ...
    
    def to_delta_relation(self, session: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class CreateDeltaTable(DeltaLogicalPlan):
    def __init__(self, mode: proto.CreateDeltaTable.Mode, tableName: Optional[str], location: Optional[str], comment: Optional[str], columns: List[proto.CreateDeltaTable.Column], partitioningColumns: List[str], properties: Dict[str, str], clusteringColumns: List[str]) -> None:
        ...
    
    def to_delta_command(self, client: SparkConnectClient) -> proto.DeltaCommand:
        ...
    


class UpgradeTableProtocol(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable, readerVersion: int, writerVersion: int) -> None:
        ...
    
    def to_delta_command(self, client: SparkConnectClient) -> proto.DeltaCommand:
        ...
    


class AddFeatureSupport(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable, featureName: str) -> None:
        ...
    
    def to_delta_command(self, client: SparkConnectClient) -> proto.DeltaCommand:
        ...
    


class RestoreTable(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable, version: Optional[int] = ..., timestamp: Optional[str] = ...) -> None:
        ...
    
    def to_delta_relation(self, client: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class OptimizeTable(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable, partitionFilters: List[str], zOrderCols: List[str]) -> None:
        ...
    
    def to_delta_relation(self, client: SparkConnectClient) -> proto.DeltaRelation:
        ...
    


class CloneTable(DeltaLogicalPlan):
    def __init__(self, table: proto.DeltaTable, target: str, isShallow: bool, replace: bool, properties: Optional[Dict[str, str]], version: Optional[int] = ..., timestamp: Optional[str] = ...) -> None:
        ...
    
    def to_delta_command(self, client: SparkConnectClient) -> proto.DeltaCommand:
        ...
    


