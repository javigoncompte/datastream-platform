"""
This type stub file was generated by pyright.
"""

import argparse
from .imports import *
from .utils import *

"""A fast way to turn your python function into a script."""
__all__ = ['SCRIPT_INFO', 'store_true', 'store_false', 'bool_arg', 'clean_type_str', 'Param', 'anno_parser', 'args_from_prog', 'call_parse']
def store_true(): # -> None:
    "Placeholder to pass to `Param` for `store_true` action"
    ...

def store_false(): # -> None:
    "Placeholder to pass to `Param` for `store_false` action"
    ...

def bool_arg(v): # -> bool:
    "Use as `type` for `Param` to get `bool` behavior"
    ...

def clean_type_str(x: str): # -> str:
    ...

class Param:
    "A parameter in a function used in `anno_parser` or `call_parse`"
    def __init__(self, help=..., type=..., opt=..., action=..., nargs=..., const=..., choices=..., required=..., default=..., version=...) -> None:
        ...
    
    def set_default(self, d): # -> None:
        ...
    
    @property
    def pre(self): # -> Literal['--', '']:
        ...
    
    @property
    def kwargs(self): # -> dict[str, Any]:
        ...
    
    def __repr__(self): # -> str | None:
        ...
    


class _HelpFormatter(argparse.HelpFormatter):
    def __init__(self, prog, indent_increment=...) -> None:
        ...
    


def anno_parser(func, prog: str = ...): # -> ArgumentParser:
    "Look at params (annotated with `Param`) in func and return an `ArgumentParser`"
    ...

def args_from_prog(func, prog): # -> dict[Any, Any]:
    "Extract args from `prog`"
    ...

SCRIPT_INFO = ...
def call_parse(func=..., nested=...): # -> partial[Any] | _Wrapped[..., Any, ..., Any]:
    "Decorator to create a simple CLI from `func` using `anno_parser`"
    ...

