"""
This type stub file was generated by pyright.
"""

import ast
from inspect import Parameter
from .utils import *
from .meta import delegates

"""Document parameters using comments."""
__all__ = ['empty', 'docstring', 'parse_docstring', 'isdataclass', 'get_dataclass_source', 'get_source', 'get_name', 'qual_name', 'docments', 'extract_docstrings']
def docstring(sym): # -> str:
    "Get docstring for `sym` for functions ad classes"
    ...

def parse_docstring(sym): # -> AttrDict:
    "Parse a numpy-style docstring in `sym`"
    ...

def isdataclass(s): # -> TypeIs[DataclassInstance | type[DataclassInstance]] | TypeIs[type[Any]]:
    "Check if `s` is a dataclass but not a dataclass' instance"
    ...

def get_dataclass_source(s): # -> str:
    "Get source code for dataclass `s`"
    ...

def get_source(s): # -> str | None:
    "Get source code for string, function object or dataclass `s`"
    ...

_clean_re = ...
empty = Parameter.empty
def get_name(obj): # -> str | Any:
    "Get the name of `obj`"
    ...

def qual_name(obj): # -> str | Any:
    "Get the qualified name of `obj`"
    ...

@delegates(_docments)
def docments(elt, full=..., args_kwargs=..., **kwargs): # -> AttrDict:
    "Generates a `docment`"
    ...

class _DocstringExtractor(ast.NodeVisitor):
    def __init__(self) -> None:
        ...
    
    def visit_FunctionDef(self, node): # -> None:
        ...
    
    def visit_ClassDef(self, node): # -> None:
        ...
    
    def visit_Module(self, node): # -> None:
        ...
    


def extract_docstrings(code): # -> dict[Any, Any]:
    "Create a dict from function/class/method names to tuples of docstrings and param lists"
    ...

