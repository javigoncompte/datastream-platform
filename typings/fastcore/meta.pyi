"""
This type stub file was generated by pyright.
"""

from .imports import *
from .test import *

"""Metaclasses"""
__all__ = ['test_sig', 'FixSigMeta', 'PrePostInitMeta', 'AutoInit', 'NewChkMeta', 'BypassNewMeta', 'empty2none', 'anno_dict', 'use_kwargs_dict', 'use_kwargs', 'delegates', 'method', 'funcs_kwargs']
def test_sig(f, b): # -> None:
    "Test the signature of an object"
    ...

class FixSigMeta(type):
    "A metaclass that fixes the signature on classes that override `__new__`"
    def __new__(cls, name, bases, dict): # -> Self:
        ...
    


class PrePostInitMeta(FixSigMeta):
    "A metaclass that calls optional `__pre_init__` and `__post_init__` methods"
    def __call__(cls, *args, **kwargs):
        ...
    


class AutoInit(metaclass=PrePostInitMeta):
    "Same as `object`, but no need for subclasses to call `super().__init__`"
    def __pre_init__(self, *args, **kwargs): # -> None:
        ...
    


class NewChkMeta(FixSigMeta):
    "Metaclass to avoid recreating object passed to constructor"
    def __call__(cls, x=..., *args, **kwargs): # -> Any:
        ...
    


class BypassNewMeta(FixSigMeta):
    "Metaclass: casts `x` to this class if it's of type `cls._bypass_type`"
    def __call__(cls, x=..., *args, **kwargs): # -> Any | None:
        ...
    


def empty2none(p): # -> None:
    "Replace `Parameter.empty` with `None`"
    ...

def anno_dict(f): # -> dict[Any, Any | None]:
    "`__annotation__ dictionary with `empty` cast to `None`, returning empty if doesn't exist"
    ...

def use_kwargs_dict(keep=..., **kwargs): # -> Callable[..., Any]:
    "Decorator: replace `**kwargs` in signature with `names` params"
    ...

def use_kwargs(names, keep=...): # -> Callable[..., Any]:
    "Decorator: replace `**kwargs` in signature with `names` params"
    ...

def delegates(to: FunctionType = ..., keep=..., but: list = ..., sort_args=...): # -> Callable[..., Any]:
    "Decorator: replace `**kwargs` in signature with params from `to`"
    ...

def method(f): # -> MethodType:
    "Mark `f` as a method"
    ...

def funcs_kwargs(as_method=...): # -> <callable subtype of bool> | partial[Any]:
    "Replace methods in `cls._methods` with those from `kwargs`"
    ...

