"""
This type stub file was generated by pyright.
"""

from .imports import *

"""Helper functions to quickly write tests in notebooks"""
__all__ = ['TEST_IMAGE', 'TEST_IMAGE_BW', 'exception', 'test_fail', 'test', 'nequals', 'test_eq', 'test_eq_type', 'test_ne', 'is_close', 'test_close', 'test_is', 'test_shuffled', 'test_stdout', 'test_warns', 'test_fig_exists', 'ExceptionExpected']
def test_fail(f, msg=..., contains=..., args=..., kwargs=...): # -> None:
    "Fails with `msg` unless `f()` raises an exception and (optionally) has `contains` in `e.args`"
    ...

def test(a, b, cmp, cname=...): # -> None:
    "`assert` that `cmp(a,b)`; display inputs and `cname or cmp.__name__` if it fails"
    ...

def nequals(a, b): # -> bool:
    "Compares `a` and `b` for `not equals`"
    ...

def test_eq(a, b): # -> None:
    "`test` that `a==b`"
    ...

def test_eq_type(a, b): # -> None:
    "`test` that `a==b` and are same type"
    ...

def test_ne(a, b): # -> None:
    "`test` that `a!=b`"
    ...

def is_close(a, b, eps=...): # -> bool:
    "Is `a` within `eps` of `b`"
    ...

def test_close(a, b, eps=...): # -> None:
    "`test` that `a` is within `eps` of `b`"
    ...

def test_is(a, b): # -> None:
    "`test` that `a is b`"
    ...

def test_shuffled(a, b): # -> None:
    "`test` that `a` and `b` are shuffled versions of the same sequence of items"
    ...

def test_stdout(f, exp, regex=...): # -> None:
    "Test that `f` prints `exp` to stdout, optionally checking as `regex`"
    ...

def test_warns(f, show=...): # -> None:
    ...

TEST_IMAGE = ...
TEST_IMAGE_BW = ...
def test_fig_exists(ax): # -> None:
    "Test there is a figure displayed in `ax`"
    ...

class ExceptionExpected:
    "Context manager that tests if an exception is raised"
    def __init__(self, ex=..., regex=...) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, type, value, traceback): # -> Literal[True]:
        ...
    


exception = ...
