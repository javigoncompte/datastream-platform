name: ${{ inputs.workflow_name }}

concurrency: 1

on:
  ${{ inputs.trigger_type }}:
    ${{ inputs.trigger_config }}

jobs:
  detect-changes:
    name: 'Detect folder changes'
    runs-on: ubuntu-latest
    outputs:
      apps-changed: ${{ steps.changes.outputs.apps }}
      packages-changed: ${{ steps.changes.outputs.packages }}
      changed-apps: ${{ steps.changed-apps.outputs.list }}
      changed-packages: ${{ steps.changed-packages.outputs.list }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Only need 2 commits for squash commit comparison

      - name: Detect changes in apps folder
        id: changes
        run: |
          # Check if apps folder has changes
          if git diff --name-only HEAD~1 | grep -q "^apps/"; then
            echo "apps=true" >> $GITHUB_OUTPUT
          else
            echo "apps=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if packages folder has changes
          if git diff --name-only HEAD~1 | grep -q "^packages/"; then
            echo "packages=true" >> $GITHUB_OUTPUT
          else
            echo "packages=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect which specific apps changed
        id: changed-apps
        run: |
          # Get list of changed app directories
          CHANGED_APPS=$(git diff --name-only HEAD~1 | grep "^apps/" | cut -d'/' -f2 | sort -u | tr '\n' ',' | sed 's/,$//')
          if [ -n "$CHANGED_APPS" ]; then
            echo "list=$CHANGED_APPS" >> $GITHUB_OUTPUT
          else
            echo "list=" >> $GITHUB_OUTPUT
          fi

      - name: Detect which specific packages changed
        id: changed-packages
        run: |
          # Get list of changed package directories
          CHANGED_PACKAGES=$(git diff --name-only HEAD~1 | grep "^packages/" | cut -d'/' -f2 | sort -u | tr '\n' ',' | sed 's/,$//')
          if [ -n "$CHANGED_PACKAGES" ]; then
            echo "list=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          else
            echo "list=" >> $GITHUB_OUTPUT
          fi

  deploy-apps:
    name: 'Deploy app ${{ matrix.app }} to ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.apps-changed == 'true' && needs.detect-changes.outputs.changed-apps != ''
    strategy:
      matrix:
        app: ${{ fromJson(format('[{0}]', needs.detect-changes.outputs.changed-apps)) }}
    steps:
      - uses: actions/checkout@v3

      - uses: databricks/setup-cli@main

      - name: Validate Bundle app ${{ matrix.app }}
        run: |
          databricks bundle validate \
            --target ${{ inputs.target }} \
            --var="type_of_deployment=apps" \
            --var="deployment_name=${{ matrix.app }}"
        working-directory: .
        env:
          ${{ inputs.env_vars }}


      - name: Deploy app ${{ matrix.app }}
        run: |
          databricks bundle deploy \
            --target ${{ inputs.target }} \
            --var="type_of_deployment=apps" \
            --var="deployment_name=${{ matrix.app }}"
        working-directory: .
        env:
          ${{ inputs.env_vars }}

  deploy-packages:
    name: 'Deploy package ${{ matrix.package }} to ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.packages-changed == 'true' && needs.detect-changes.outputs.changed-packages != ''
    strategy:
      matrix:
        package: ${{ fromJson(format('[{0}]', needs.detect-changes.outputs.changed-packages)) }}
    steps:
      - uses: actions/checkout@v3

      - uses: databricks/setup-cli@main

      - name: Validate Bundle package ${{ matrix.package }}

        run: |
          databricks bundle validate \
            --target ${{ inputs.target }} \
            --var="type_of_deployment=packages" \
            --var="deployment_name=${{ matrix.package }}"
        working-directory: .
        env:
          ${{ inputs.env_vars }}

      - name: Deploy package ${{ matrix.package }}
        run: |
          databricks bundle deploy \
            --target ${{ inputs.target }} \
            --var="type_of_deployment=packages" \
            --var="deployment_name=${{ matrix.package }}"
        working-directory: .
        env:
          ${{ inputs.env_vars }} 