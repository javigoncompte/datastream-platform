---
description: Standards for testing across all project types
globs: test_*.py
---
 # Testing Standards Rules

<rule>
name: testing_standards
description: Standards for testing across all project types

filters:
  - type: directory
    pattern: "tests/**"
  - type: file_extension
    pattern: "\\.py$"

actions:
  - type: suggest
    message: |
      When writing tests:
      
      1. Unit Tests:
         - Test one thing at a time
         - Use proper fixtures
         - Implement proper mocking
         
      2. Integration Tests:
         - Test component interactions
         - Use proper test data
         - Handle async operations
         
      3. LLM Testing:
         - Use assertion-based testing
         - Implement pairwise comparisons
         - Handle evaluation bias
         - yes or no answers for the llm judge

examples:
  - input: |
      # Bad: Multiple assertions without context
      def test_process():
          assert process()
          assert validate()
      
      # Good: Proper test structure
      @pytest.mark.asyncio
      async def test_process_validates_input():
          # Given
          test_data = create_test_data()
          
          # When
          result = await process(test_data)
          
          # Then
          assert result.is_valid
          assert result.error is None
    output: "Correctly implemented test with proper structure"

metadata:
  priority: high
  version: 1.0
</rule>