---
description: 
globs: *.py
alwaysApply: false
---
# Python Typing Conventions for Cursor

## Type Annotation Rules
### Typing Concepts
 - https://docs.basedpyright.com/v1.29.0/getting_started/type-concepts/

### Basic Types
- Use built-in types directly for type annotations since Python 3.9+:
  - `list[T]` instead of `List[T]`
  - `dict[K, V]` instead of `Dict[K, V]`
  - `set[T]` instead of `Set[T]`

### Union Types
- Use the pipe syntax (`|`) for union types since Python 3.10+:
  - `T1 | T2` instead of `Union[T1, T2]`
  - `T | None` instead of `Optional[T]`

### Type Casting
- When using `cast()`, use the modern union syntax:
  - `cast(T1 | T2, value)` instead of `cast(Union[T1, T2], value)`
  - `cast(T | None, value)` instead of `cast(Optional[T], value)`

### Imports
- Import only what's needed from typing:
  - Import `cast` directly: `from typing import cast`
  - Don't import deprecated types like `List`, `Dict`, `Union`, `Optional`

## Best Practices

1. **Type Hints for Functions**
   - Always use type hints for function parameters and return values
   - Use descriptive types that accurately represent the data

2. **Type Hints for Variables**
   - Use type hints for important variables, especially in complex functions
   - Prefer inline type annotations over type comments

3. **Type Casting**
   - Use `cast()` only when necessary to satisfy the type checker
   - Document why a cast is needed with a comment

4. **Type Ignore Comments**
   - Use `# type: ignore[error-code]` for specific type errors
   - Document why the ignore is necessary

5. **Type Aliases**
   - Create type aliases for complex types that are used frequently
   - Use descriptive names for type aliases

## Examples

```python
# Good
from typing import cast

def process_data(items: list[str], options: dict[str, str] | None = None) -> dict[str, int]:
    result: dict[str, int] = {}
    # type: ignore[arg-type] - Third-party library type hint limitation
    processed = external_lib.process(items, options)
    return cast(dict[str, int], processed)

# Bad
from typing import List, Dict, Optional, Union, cast

def process_data(items: List[str], options: Optional[Dict[str, str]] = None) -> Dict[str, int]:
    result: Dict[str, int] = {}
    processed = external_lib.process(items, options)
    return cast(Union[Dict[str, int], None], processed)
```